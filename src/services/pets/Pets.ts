// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { BaseService } from '../base-service';
import { ContentType, HttpResponse } from '../../http';
import { RequestConfig } from '../../http/types';
import { Request } from '../../http/transport/request';
import { Pet, petRequest, petResponse } from './models/pet';
import { ListPetsParams } from './request-params';

export class PetsService extends BaseService {
  /**
   *
   * @param {number} [limit] - How many items to return at one time (max 100)
   * @returns {Promise<HttpResponse<Pet[]>>} A paged array of pets
   */
  async listPets(params?: ListPetsParams, requestConfig?: RequestConfig): Promise<HttpResponse<Pet[]>> {
    const request = new Request({
      method: 'GET',
      path: '/pets',
      config: this.config,
      responseSchema: z.array(petResponse),
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addQueryParam('limit', params?.limit);
    return this.client.call(request);
  }

  /**
   *
   * @returns {Promise<HttpResponse<any>>} Null response
   */
  async createPets(body: Pet, requestConfig?: RequestConfig): Promise<HttpResponse<undefined>> {
    const request = new Request({
      method: 'POST',
      body,
      path: '/pets',
      config: this.config,
      responseSchema: z.undefined(),
      requestSchema: petRequest,
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addHeaderParam('Content-Type', 'application/json');
    return this.client.call(request);
  }

  /**
   *
   * @param {string} petId - The id of the pet to retrieve
   * @returns {Promise<HttpResponse<Pet>>} Expected response to a valid request
   */
  async showPetById(petId: string, requestConfig?: RequestConfig): Promise<HttpResponse<Pet>> {
    const request = new Request({
      method: 'GET',
      path: '/pets/{petId}',
      config: this.config,
      responseSchema: petResponse,
      requestSchema: z.any(),
      requestContentType: ContentType.Json,
      responseContentType: ContentType.Json,
      requestConfig,
    });
    request.addPathParam('petId', petId);
    return this.client.call(request);
  }
}
